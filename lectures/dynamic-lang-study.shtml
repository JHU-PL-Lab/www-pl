<!--#include virtual="/pl/header.html" -->

</div>

<div id="content"> <h2>Study of Dynamically Typed Languages</h2>

<!-- Need to redo these notes to focus less on obscure features not used and more on actual used features.  Also lambda in Pyton is not allowed to work on non-expressions -->
<h3>Dynamic Typing</h3>
A <em>dynamically typed language</em> is a language which 
<ul>
  <li> Has no typechecker as part of the compiler which rejects
      programs based on their types
  <li> Detects type faults at runtime, e.g. adding a number and
      a function, etc, raising an exception in such cases.
</ul>

Upsides
      <ul>
	<li>Can be more freewheeling: extend objects, easy <code>eval</code>-ing, lists and tuples can be merged, etc.
	<br> -- some programming patterns are very hard to typecheck, they are left out of typed languages but can be very powerful.
	<li>ZERO programmer overhead of writing out type information.
      </ul>



Downsides
  <ul>
  <li>Programs run slower due to the run-time overhead of dynamic checks and uncertain layouts.
  <li>You lose the types-as-specifications aspect of types.  Libraries must be typed informally and such types are sloppy.
  <li>Type errors are caught much later, making debugging much more challenging in some cases.
  <li>Freewheeling style bites you for larger apps which don't
	    fit in your mental cache anymore
</ul>

Overall verdict?
      <ul>
	  <li>Dynamically-typed languages tend to be better for small- and perhaps
      medium-scale applications where speed is not critical;
	  <li>they tend to be worse for large-scale
      applications and speed-critical applications.
      </ul>
      
Common properties
<ul>
  <li>They often run in an environment with a top-loop and where the codebase is
      itself a mutable data structure -- can turn a string into new code and run it.
  <li>Dynamically typed languages are often at the forefront of language features: its easy to add new features to them so they have led much of the evolution of PLs (historical examples: Lisp, Smalltalk).
  <li>The modern ones have good foreign function interfaces to C(++) and use C libraries when speed is needed.
</ul>

<h3>The Different Schools of Dynamically-typed Languages</h3>
The two historical giants
<ul>
  <li>Lisp, the original dynamically-typed language, and its direct descendant Scheme
  <li>Smalltalk and its direct descendant Squeak: Lisp philosophy but with objects added
</ul>


The scripting tree: dynamically-typed but descended from job control languages (JCL's) and not Lisp/Smalltalk
<ul>
  <li>Unix scripting: <a
      href="http://en.wikipedia.org/wiki/Scripting_programming_language">sh, csh, bash, awk, tcl, etc</a>
  <li> "Scripting language" today means any dynamically-typed language that may be used to glue together different runtimes/languages/frameworks
      <li>Other examples include Perl, JavaScript (at least initially - notice the influence in its name), ActionScript, Emacs Lisp, etc.

</ul>

Modern dynamically-typed / scripting languages: part Lisp/Smalltalk, part JCL/scripting ancestry:
<ul>
  <li><a href="http://docs.python.org/tut/">Python</a>
  <li><a href="http://www.ruby-doc.org/docs/ProgrammingRuby/">Ruby</a>
  <li><a href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</a>
</ul>
<h3>Dynamically typed languages and our <strong>Fb</strong>
series</h3>
<ul>
  <li>A <strong>FbSRXVOB</strong> mash contains the core features of
      a dynamically typed language.
  <li>We did not cover how run-time type errors lead to exceptions but
      its simple: add a bunch of runtime type error handling rules including
       <table border='0' cellpadding='0' cellspacing='15'>   <tr> <td><strong>(<span 
class="cmtt-10">- </span>Mismatch Left)</strong></td> <td> <table border='0' cellpadding='0' cellspacing='0'> <tr><td align='center'>&nbsp;<span 
class="cmmi-10">e</span>&nbsp;==&gt;&nbsp;<span 
class="cmtt-10">v for v not an integer</span></td></tr> <tr><td><hr noshade size='1'></td></tr> <tr><td align='center'><span 
class="cmmi-10">e</span> <span 
class="cmtt-10">-</span> <span 
class="cmmi-10">e</span><span 
class="cmsy-10">'</span>&nbsp;==&gt;&nbsp;<span 
class="cmtt-10">Raise (#</span><span 
class="cmti-10">TypeMismatch</span> <span 
class="cmmi-10">True</span><span 
class="cmtt-10">)</span></td></tr> </table> </td> </tr>  </table>
etc. 
</ul>
We will now look at some crosscutting aspects of these languages.

<h3>Data Structures</h3>
Many of them have a "mother of all data structures" approach
<ul>
  <li>Lisp: Everything is a List (including your source code! ("homoiconicity") -- great for metaprogramming)
  <li>Smalltalk, Ruby: Everything is an Object (more below)
  <li>JavaScript: dictionary-object (the two are unified unlike Python)
  <li>Python doesn't really have this; everything is an "object", but not in a strong sense like Ruby/Smalltalk (objects were not initially in Python and it shows).
</ul>

      <h3>Inheritance</h3>
<ul>
  <li>Smalltalk: regular single inheritance
  <li>Python: multiple inheritance (and the associated <a
      href="http://en.wikipedia.org/wiki/Diamond_problem">Diamond
      Problem</a> of course)
  <li>Ruby: single inheritance plus arbitrary <a
      href="http://www.ruby-doc.org/docs/ProgrammingRuby/html/classes.html#UC">mixin
      modules</a> which are basically classic mixins.  Modules are like classes but since these modules are themselves at the top of
      the hierarchy (modules cannot have supermodules) there is no
      dreaded diamond property -- you can only build three of the four
      edges of the diamond.
    <li>JavaScript: via prototypes, discussed below.
</ul>




<h3>Higher order functions</h3>
<ul>

 <li>Lisp/Scheme: <code>(lambda (x) ... )</code>
     <ul>
       <li> Lisp was the first language that implemented  higher-order functions; McCarthy was inspired by lambda-calculus
       <li>But, they didn't quite get it right, they used <em>dynamic binding</em> for nonlocal variables which is often bone-headed.
         <pre>
           Let x = 1 In
             Let f = Fun _ -> x In
               Let x = 2 In
                 f 0</pre>
         <li> returns 1 in OCaml Fb etc etc due to closures, returns 2 in Lisp.
         <li>Most recent value on call stack picked in dynamic binding.
     </ul>
  <li>Smalltalk: <a
      href="http://en.wikipedia.org/wiki/Smalltalk#Code_blocks">code
      blocks</a> subsume higher-order functions.
  <li>Ruby: has blocks which are similar to Smalltalk's.
  <li>Python: <a href="http://docs.python.org/3.4/tutorial/controlflow.html#lambda-forms">lambda-forms</a> <code>lambda x: x + 1</code> <br>(<strong>but</strong>, <a href="http://stackoverflow.com/questions/141642/what-limitations-have-closures-in-python-compared-to-language-x-closures">Pre-3 Python's lambdas don't let you write to nonlocal variables</a>, and you can only put expressions, not commands, in the body)
</ul>

<h3>Flexible Notions of object</h3>
<h4>Smalltalk</h4>
      <ul>
	<li>Everything is an object in Smalltalk, including Classes.
        <li>Even <a href="http://en.wikipedia.org/wiki/Smalltalk#Control_structures">if-then-else</a> and <code>+</code> are expressed via messaging syntax e.g. <code>if: ... then: .. else: ...</code> is an <code>if:then:else:</code> message
      </ul>  

<h4>Ruby</h4>
      <ul>
	<li>Classes are objects in Ruby.
	<li>More flexible than Smalltalk, can add methods to existing objects a la JavaScript.
      </ul>

<h4><a name="python_objects"></a><a href="https://docs.python.org/3.4/tutorial/classes.html#class-definition-syntax">Python</a></h4>
      <ul>
	<li>Objects are implemented as extensions of Dictionary data type in Python: Python initially had no objects.
	<li>Python objects are related to our <strong>FbSR</strong> objects in since a record is a (restricted) dictionary: 
	    <ul>
	      <li><code>self</code> needs to be an explicit parameter on each Python method, 
	      <li>classes just make dictionaries;
	    </ul>
      <li>Unlike <strong>FbSR</strong>, self-passing upon method invocation is sugared to be implicit: <code>ob.foo()</code> is all that is needed.
      <li>Python also lets you pun between an object view and a class view -- <code>ObsClass.foo(ob)</code> is the same as writing <code>ob.foo()</code> if <code>ObsClass</code> was the class that created <code>ob</code>.
      <li>An <strong>FbSR</strong> view of Python objects will make this more clear:
	  <pre>
Let obsClass = {
  new =  Function thisclass -> 
       { x = Ref 0; class = thisclass };  (* the "object" is just the fields and my class *)

  foo = Function thisob -> Function _ -> !(thisob.x) + 1 (* adding one is so much fun! *)
} In

Let ob = ((obsClass.new) obsClass) In (* object creation -- need to pass class to itself *)
    (obsClass.foo) ob {}; (* message sending, need to pass object to itself *)
    (ob.class.foo) ob {}  (* message sending starting from ob only, not its class *)
	  </pre>
	  - the last line shows how the sugar <code>ob.foo()</code> can work, the runtime needs to know which class has the methods.
      </ul>
      <h4>JavaScript</h4>
      <ul>
        <li>JavaScript has no classes per se (its <a href="https://en.wikipedia.org/wiki/Prototype-based_programming">prototype-based</a> following Self), so objects need to be very flexible
        <li>Objects are just dictionaries with self-awareness hard-wired in<br>-- keys are method names, values are code, <code>this</code> is yourself.
          <li>We will review these nice examples: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">JavaScript objects in a nutshell</a>
      </ul>

<h4>Implementing Object Dispatch</h4>
      <ul>
	<li>All dynamic OO languages are <em>duck typed</em>: if an object has a <code>quack</code> method it should respond to it when sent a <code>quack()</code> message.
	<li>When the runtime needs to dispatch <code>ob.quack()</code>, it has no idea how <code>ob</code> is laid out or if it even has a <code>quack</code> method.
	<li>Basic solution: <code>ob</code> has a dispatch hashtable say <code>hash</code> and runtime performs <code>hash("quack")</code> to get a pointer to the code for <code>quack</code> (or error if not in table).
	<li>Standard optimization on the above: use the <strong>Flyweight</strong> design pattern and give each method string a fresh integer equivalent to compress message names to one word.  So, if "quack" is #453, do <code>hash(453)</code> instead.
	<li>Hashing makes dispatch much, much slower than e.g. C++ where only a couple pointers need to be followed, only a few machine instructions.
	<li>Java is between C++ and fully dynamic since the object can be in an <em>interface</em> variable and could be many different objects at runtime with <code>quack()</code> code in different slots.  But the types still give a lot of information and clever tricks can make dispatch fast.
      </ul>
      
<h3>Reflection and metaprogramming</h3>
      <ul>
	<li>"Reflection" means given some object at runtime, can you poke around to find its class, methods, etc. 
	<li>  Reflection is easy to do in a dynamically-typed language because the program data structure is always around explicitly at runtime<br>
 <li>Reflection is also possible in Java, but its much more clunky to use due to the type system in the way
	<li> Run-time metaprogramming with <code>eval</code> -- we discussed this with metaprogramming in the <a href="cppstudy.shtml">C++ lecture.</a>
      </ul>

</div>


<!--#include virtual="/pl/footer.html" -->
