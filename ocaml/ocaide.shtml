<!--#include virtual="/pl/header.html" -->

</div>

<div id="content">

<h2>OCaIDE</h2>

OcaIDE is an Eclipse plugin for OCaml development.  It provides batch
compilation support, assistance with type information, an integrated OCaml
toploop, and even a debugger.  <em>(note, I could not get the debugger to
work; please let me know if the debugger works for you)</em>.  The <a
href="http://www.algo-prog.info/ocaide/">OCaIDE homepage</a>
contains all the information to install it; help is available
within Eclipse on how to use it.  <b>Warning:</b> Be sure that you have
installed OCaml <i>before</i> you install OcaIDE to make sure things go
smoothly.

<h3>General Tips</h3>
These tips assume
you have already installed OCaIDE.

<ul>
    <li>Use Window -&gt; Open Perspective -&gt; Other .. and select OCaml to open the OCaIDE perspective if it is not already open.
    </li>
  	    <li>Under the Eclipse Preferences -&gt; OCaIDE -&gt; Paths, make sure the paths to all the
    ocaml executables are correct, and also the path to your computer's "<code>make</code>" command (Mac users may need to install <code>make</code>, it comes with the Developer Tools addition for example).
     </li>
    <li>
        For the first couple homeworks, you'll want to use the "Ocaml Managed Project" variety of project.  This spares you the work of
        writing a makefile and allows you to focus on learning the language. For the most part, you only need the editor and the built-in toploop 
        for these assignments.
        (<em>Note:</em> By default, eclipse attempts to compile your project when you save it. Unfortunately OCaIDE's 
        compilation process for "Ocaml Managed Project" is a bit buggy at the moment and it will give your an error. To avoid this, ensure that the 
        menu item "Build Automatically" under the "Project" menu is unchecked).
    </li>
    <li>
        Use Window -&gt; show View -&gt; OCaml Toplevel if you need to start a new top-loop,
        which appears below.  Type your input in the small lower window.
    </li>
    <li>
        For small fiddling in the top loop, make a new "module" (i.e., a .ml
        file), edit, select the code in the file with the mouse, and use the
        menu option Ocaml -&gt; Eval in Toplevel to submit it to the top loop in
        the window below.  F6 is usually a key shortcut for this commmand.
    </li>
    <li>
        To submit the whole file to the toploop as if you typed  it there,
        select everything and "Eval in Toplevel" as above.  There is a menu
        option "Load in Toplevel" which loads a whole file, but this option
        loads the bytecode and it loads it as a module (i.e., it
        <code>#use</code>s it).  Another way is to use the "load in toplevel"
        and then type #open Myfilename to the toplevel to make your functions
        directly available in the toplevel (where myfilename.ml is the file you
        were editing).
    </li>
</ul>


    
<h3>Using the FbDK with OCaIDE</h3>
The FbDK uses ocamlc to develop standalone applications and different setup instructions are needed for that.
<ul>
  <li>First, see the tips above.
  <li>
       For <strong>Linux or Mac users</strong>:
        <ol>
            <li>
                Create an "OCaml Makefile" project (<i>not</i> an empty Makefile
                project).
            </li>
            <li>
                Extract the contents of the FbDK archive into the project
                directory (not from within eclipse, use your shell or file browser outside of Eclipse).  Note that files such as "configure" should be in
                your project's root directory, not in a subfolder.
            </li>
            <li>
                From the console, run <code>./configure</code> from within the
                Eclipse project directory to create the makefile.
            </li>
            <li>Refresh the project from within Eclipse.</li>
            <li>To be safe that the project will build properly, select "Properties" of the project, and under "Paths",  set make targets for rebuild to <code>all</code>, 
   set make targets for clean to <code>clean</code>, and under additional options put <code>-f Makefile</code> (these should be the defaults but OCaIDE occasionally forgets them).</li>
            <li>Select "Clean Project" from the Project menu to build your project.</li>
            <li>
                In the Run Configurations dialog, create a new OCaml Executable
                configuration.  Type the project name here exactly as you typed
                it before and browse for the "Fb" executable in the project
                directory.  You may now use the run configuration to run your
                interpreter.
            </li>
        </ol>
        For <strong>Windows users</strong>: 
        <div>* See also the experimental instructions below</div>
        <ol>
            <li>Create a new OCaml Managed Project.</li>
            <li>
                Extract the contents of the FbDK archive into the project
                directory.  The project's directory should immediately contain
                the file "configure".
            </li>
            <li>Refresh the project from within Eclipse.</li>
            <li>
                In the project's Properties dialog, choose the Builder panel.
            </li>
            <li>
                Uncheck "Ocaml Builder".  You will get a warning message; press
                OK.
            </li>
            <li>
                Press the New button to create a new builder.  Choose "Program"
                and name this builder "FbDK batch builder".
            </li>
            <li>
                Under Location, browse the workspace and select
                "win32Build.bat".  (If it does not appear in the dialog, try
                refreshing your project again, confirm that the file is in the
                project from within Eclipse, and then resume from step 3 above.) 
            </li>
            <li>
                Under Working Directory, browse the workspace and select the
                project directory.
            </li>
            <li>
                Under the Refresh tab, check the box named "Refresh resources
                upon completion."
            </li>
            <li>
                Under the Build Options tab, check the box named "During auto
                builds."
            </li>
            <li>
                Press OK to apply the new builder and leave the properties
                dialog.
            </li>
            <li>
                Select "Build All" from the Project menu to build the project.
            </li>
            <li>
                In the Run Configurations dialog, create a new OCaml Executable
                configuration.  Type the project name here exactly as you typed
                it before and browse for the "Fb" executable in the project
                directory.  You may now use the run configuration to run your
                interpreter.
            </li>
            <li>
                When you make changes to <code>fbinterp.ml</code>, you will need
                to view the Console for errors.  Because the OcaIDE builder has
                been disabled, the errors reported by Eclipse are meaningless.
            </li>
        </ol>

        <strong style="color: red">(Experimental)</strong> For the <em>adventurous</em> <strong>windows users</strong>:
        <div>The goal is to get you enough of a POSIX environment to make working with FbDK in OCaIDE easier on windows.</div>
        <ol>
            <li>Install Msys. There are detailed instructions <a href=http://www.mingw.org/wiki/Getting_Started>here</a>. But it may be too detailed. So here are the steps you need to follow:
                <ol>
                    <li>Download mingw-get-setup.exe from the page above and start the installation.</li>
                    <li>Continue with the installation until it presents you with the "MinGW Installation Manager"</li>
                    <li>Here make sure to mark both "mingw-developer-toolkit" and "msys-base" for installation.</li>
                    <li>Start the installation by clicking "Apply Changes" in the "Installation" menu. It will ask you to confirm and proceed to download and install a slew of packages.</li>
                    <li>Once installation is completed, add "C:\MinGW\bin" and "C:\MinGW\msys\1.0\bin" to your path (assuming you installed to the default path)</li>
                </ol>
            
            At this point you should have a usable bash, make and autoconf installation.

            <li>Open up your eclipse and under the Eclipse Preferences -> OCaIDE -> Paths, ensure that the path to the "make" command is set correctly. (An easy way to find the full path to msys make is to open a command prompt and type "where make")</li>

            <li>You can now follow the same instructions as for Linux and Mac users with a minor tweak - at step 3, you need to open a command prompt, navigate to the project directory and invoke "bash -c ./configure" instead of just "./configure".</li>
        </ol>
    
    <li>
    You may want to use the top loop to interact with
    <strong>F&#x266d;</strong> rather than the executable; for that, edit
    the fbdktoploop.ml file, select all, and  Eval in Toplevel.  Now you
    have all the functions in that file available in the top loop
    below.  Note that this step will not automatically rebuild - you
    must perform it manually each time you save changes.  You will need
    to uncomment the "#cd" command to point the toploop to the right
    location to load the files.
    </li>
</ul>
</div>






<!--#include virtual="/pl/footer.html" -->



