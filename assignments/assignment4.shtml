<!--#include virtual="/pl/header.html" -->	 
</div>

<!-- Main -->
<div id="main" class="wrapper style4">

<!-- Content -->
<div id="content" class="container">
<section>
<header class="major">
  <h2>Assigment 4: Operational semantics</h2>
</header>

<h4>Part A Due: Friday March 17th<br>
Part B Due: Weds April 5th</h4>
<p>
  <h3>Part A</h3>

<ol>

   <li>Make direct operational semantics rules for the following
  <strong>Fb</strong> extensions.  Note that you can use as few or as
  many rules as you need.  What you <em>must</em> do is write a rule
  that actually does the "work" of the construct; don't just translate
  it into some other <strong>Fb</strong> syntax that will do the work.
  <br>
<ol class="a">
  <li><code>Freeze(e)</code> and <code>Thaw(e)</code> (we had just defined these as macros in class; write out operational semantics rules)</li>
  
  <li><code>Flip</code> (a coin flip primitive -- can return either  <code>True</code> or <code>False</code>)</li>
<li><code>Triage e Negative e' Zero e'' Positive e'''</code>
  (<code>e</code> must be a number; run <code>e'</code> if negative,
  <code>e''</code> if zero, and <code>e'''</code> if positive - like
  <code>If</code> but a three-way conditional on a number).</li>
</ol>
     <li>Repeat question 1 of part A, but for <strong>FbS</strong> in place of <strong>Fb</strong>.</li>
  <li> Write a <strong>FbS</strong> program which creates a 3-cycle in
  memory: cell 1 points to cell 2 points to cell 3 which points
  back to cell 1.  Sketch the  operational semantics execution to show
    that the final store indeed has the  indicated 3-cycle in it.</li>
  
    
   <li> Let us consider a dynamically-typed language, <strong>DFbX</strong> which is an extension of <strong>FbX</strong> that <tt>Raise</tt>'s exception <tt>#rtte</tt> ("run-time type error") whenever there is a run-time type error.  For example, program <tt>3 + True</tt> will return <strong>DFbX</strong> value <tt>Raise #rtte(0)</tt>.  Since an exception is being raised, such exceptions can be handled within the language and execution can continue.  In the Fb interpreter any such run-time type error would cause the Fb program to abort.  (The argument <tt>0</tt> to the exception is just a dummy, it should be a more detailed error code describing how we tried to add a boolean, but we will simplify and just use a dummy here.)  Some clarifying points:
     <ul>
  <li>Make sure to preserve left-to-right evaluation on <tt>+</tt> etc, so for example if <tt>d</tt> is a program that computes forever then <tt>d + True</tt> should compute forever, it should not raise a rtte.
  <li>Try to catch all the bad cases, so an interpreter written from the spec would never raise an OCaml run-time type exception since they were already caught from within the language.  You can make rule schemas to cover a bunch of cases in one rule, any way its not ambiguous what you are specifying is fine.
  </ul>
</ol>

  <h3>Part B</h3>
  
  <ol>
    <li>Implement an interpreter for the variant language <strong>FbVPL</strong> which is <strong>FbV</strong> plus <strong>FbP</strong> plus OCaml-style <tt>Let</tt> as a built-in (not as a macro).  Additionally, change the <tt>And</tt> and <tt>Or</tt> constructs so that they short-circuit: implement what you needed to specify in assignment 3 part 3 problem 3.
      <p>In order to get you going we have written a scanner/parser/pretty printer for  <strong>FbVPL</strong> which can be downloaded <a href="FbExt-assn4.zip">here</a>.  This zipfile is a directory FbExt; replace FbDK/src/FbExt with this directory and write the interpreter code for <strong>FbVPL</strong> in the file fbextinterp.ml.  This FbExt directory is where extensions to Fb can be written such as this; it is very similar to the Fb directory and files, but replacing fb with fbext in the file (and module) names.  <tt>make</tt> will also build this <tt>ocamlrun FbExt</tt> interpreter, and the <tt>fbexttoploop.ml</tt> should also work for interacting with the interpreter in the OCaml top loop.
      <p>You will need to port over your <strong>Fb</strong> interpreter code for the basic <strong>Fb</strong> features.  If you lost points for buggy code there, we will be <em>very</em> helpful in getting your basic <strong>Fb</strong> interpreter stuff working now if you ask.  In any case the tests will primarily be on the new features and not on the function calling.

     <li> It
       turns out that objects can also be encoded using variants.  This is closely related to how variants can generally encode records, a topic we covered in lecture and is at the very end of Chapter 3 of the book.
       <ol class="a">
	 <li>
  Taking your <strong>FbVPL</strong> interpreter from the previous question, write out a version of the <code>Point</code> class example in the book.  The analogous
  record-based version is in sections 5.1.4, but that version has state and we don't here, so follow Section 5.1.1 and make the fields immutable in your encoding; also include the <tt>iszero</tt> method of the 5.1.1 encoding so there is more than one method. Lastly, just make <tt>magnitude</tt> square and add the point coordinates (i.e. x^2 + y^2), no need to implement square root.  Use the code template in <a href="assignment4.ml">assignment4.ml</a> - this template also gives a hint on how your object should work as it shows how a message send can be achieved.
   
<li>Make a message sending macro <tt>send</tt> which will allow us to avoid the explicit self-passing we did for the previous question.  See the template file.
       </ol>
  <li>The <strong>FbOB</strong> to <strong>FbSR</strong>
     translation showed how objects can be encoded in terms of state
     (and records).  Show that the opposite holds, namely that
     <strong>FbSR</strong> can be translated into
     <strong>FbOB</strong> by encoding state and records in terms of
     objects.  In your translation, show how 
     <code>Ref</code>, <code> := </code>, and <code> !</code> are
     translated, as well as records and record field selection.  You can write your
     translation in either abstract or concrete syntax, as either
    math. or a Caml program. See the
     lecture notes for the <strong>FbOB</strong> syntax.
  </ol>


<h3>Submission and Grading</h3>

<ul>
  <li>We will be using <a href="https://gradescope.com">Gradescope</a> again.</li>
  <li>There will be three separate submissions in Gradescope for this assignment: "Assignment 4A written" for the first all-written part, "Assignment 4B code" for problem 1 and 2 on 4B (upload ONLY the files <tt>fbextinterp.ml</tt> and <tt>assignment4.ml</tt>) and "Assignment 4B written" for the written part of 4B.</li>
    </ul>
	
</section>
</div>
</div>


<!--#include virtual="/pl/footer.html" -->
