600.426 - Programming Languages
JHU Spring 2013
Homework - 4 - Part A (40 points)

----------------------------------------------------------------------------------------
HEADER: PLEASE FILL THIS IN
----------------------------------------------------------------------------------------

Name                  :
List of team Members  :
List of discussants   :


----------------------------------------------------------------------------------------
Operational Equivalence
----------------------------------------------------------------------------------------

1. For each of the following Fb expressions, indicate whether operational equivalence
   holds. If it does not, show some context that evaluates differently dependent upon 
   which of the two expressions you use. (Remember: it only takes one of the infinitely 
   many contexts to make the two expressions operationally inequivalent). 
   
   In the expressions below e1 and e2 indicate *arbitrary* Fb expressions and x and y are
   variables.

   NOTE: You do NOT have to prove that two expressions are operationally equivalent.

   [15 Points]

   a. e1 + x + e2 =~ e2 + x + e1

   b. Function x -> x + y =~ Function y -> y + x

   c. If (2 = 1 + 1) Then x Else 0 0 =~ x

   d. (Function x -> x)(Function x -> x) =~ (Function x -> x)

   e. (Function x -> x x) =~ (Function x -> x x x)


----------------------------------------------------------------------------------------
Operational Semantics
----------------------------------------------------------------------------------------

2a. Warmup. Section 3.1 of the book describes extending Fb to add tuples. However that
    description is entirely in terms of extending the interpreter code. 
    
    For this question, write down the new operational semantics rules corresponding to 
    this language extension. You must ensure that your semantics matches the interpreter
    rules correctly.

    [7 Points]

2b. Write out the operational semantics rules for for FbL, Fb with lists. We define the
    following list syntax (making it a little different from OCaml to avoid confusion)
     - "[[ ]]". Syntax for empty list
     - "e ++ e". This is the cons operator (similar to :: in OCaml and has similar
        semantics. An example element list: "1 ++ (True ++ (3 ++ [[ ]]))"
     - "Match e With [[ ]] -> e | (x ++ x) -> e". This is an FbL specific match operation.
        (Note: x is the metavariable for variables). So for example the following returns 11:
        Match (1 ++ (2 ++ [[ ]])) With [[ ]] -> 0 | (h ++ t) -> h + 10

    For your answer:
      1. Make sure to define any new values in FbL (beyond those present in Fb)
      2. Give the new operational semantics rules that would have to be 
         added to standard Fb rules. 

    [13 Points]

2c. Write out the proof tree describing the evaluation of the following FbL expression:
    (Function l -> Match l With [[ ]] -> 0 0 | h ++ t -> h) ((1 + 1) ++ 2)

    [5 Points]
