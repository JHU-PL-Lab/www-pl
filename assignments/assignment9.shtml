<!--#include virtual="/pl/header.html" -->
</div>

<!-- Main -->
<div id="main" class="wrapper style4">

  <!-- Content -->
  <div id="content" class="container">
    <section>
      <header class="major">
        <h2>Assigment 9: Operational Equivalence</h2>
      </header>
<ol>
  <li>Answer whether the following <strong>Fb</strong> operational
      equivalences hold.  If the answer is no, give a context C
      showing that fact.   If the answer is yes, use the rules of Section 2.4.2 to show it (there may not be quite enough rules, feel free to make up new general rules if there are some extra ones needed; just make sure the rules are general and are true!).
      <ol class="a">
	<li><code>1 + 1 ~= 3</code></li>
	<li><code>x ~= z</code></li>
	<li><code>(Fun x -> e)(e') ~= e[e'/x]</code> (assume <code>e'</code> contains no free variables <code>x</code>)</li>
	<li><code>Fun x -> x =~ Fun x -> x + 0 </code></li>
	<li><code>(Fun x -> x)(Fun y -> y)</code> =~ <code>(Fun z -> z)</code></li>
        <li><code> x + y + z =~ z + y + x </code></li>
      </ol>



  <li>Recall the definition of operational equivalence in the book:
    <blockquote><strong>Definition 2.16</strong> (Operational Equivalence).  <code>e</code> =~ <code>e'</code>
      if and only if for all contexts <code>C</code> such that <code>C[e]</code> and <code>C[e']</code> are closed, <code>C[e]</code>&nbsp;==&gt;&nbsp;<code>v</code>  for
      some <code>v</code>  if and only if <code>C[e']</code>&nbsp;==&gt;&nbsp;<code>v'</code> for some <code>v'</code>.
</blockquote>
      Is the following variation equivalent?
 <blockquote>     <strong>Definition 2.16'</strong> (Operational Equivalence).  <code>e</code> =~ <code>e'</code>
      if and only if for all contexts <code>C</code> such that <code>C[e]</code> and <code>C[e']</code> are closed, <code>C[e]</code>&nbsp;==&gt;&nbsp;<code>0</code> if
      and only if <code>C[e']</code>&nbsp;==&gt;&nbsp;<code>0</code>. 
</blockquote>
     Justify your answer by either finding a counterexample or outlining a proof that they are the same.

  <li> Operational equivalence for <strong>FbS</strong> can be defined in nearly the same way; the only difference is the store S needs be be included in the definition.  For this question write out the version of Definition 2.16 for <strong>FbS</strong>.
  </li>

  
  <li>Show that <code>Fun f -> f 0  + f 1  ~= Fun f -> f 1 + f 0</code>, which holds in <strong>Fb</strong>, does not hold in <strong>FbS</strong> due to side effects.   Use your definition in the previous question to concretely produce the C, don't just informally argue.

</ol>

    </section>
  </div>
</div>


<!--#include virtual="/pl/footer.html" -->

