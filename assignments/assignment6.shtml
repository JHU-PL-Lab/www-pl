<!--#include virtual="/pl/header.html" -->
</div>

<!-- Main -->
<div id="main" class="wrapper style4">

  <!-- Content -->
  <div id="content" class="container">
    <section>
      <header class="major">
        <h2>Assigment 6: Extensible Records and Objects</h2>
      </header>

      In this Homwework all the answers are "written" except for question 2; there will be two submission points in Gradescope for written and code portions.
      <ol>
  <li>Consider <strong>FbR@</strong>,  the records language <strong>FbR</strong> with in addition an operator <code>e @ e</code> allowing records to be <em>appended</em>.
If there is the same field in both records, the field in the right record has precedence.  So for example
    <pre>({a = 5; b = 7} @ {b = 1 + 2}).b</pre> will return <code>3</code>.  Other than this change the language is the same as <strong>FbR</strong>.
    <ol class="a">
      <li>Give the expressions and values for <strong>FbR@</strong>.</li>
      <li>Write out the operational semantics rules for <strong>FbR@</strong>; you can leave out the <strong>Fb</strong> rules as your language can be an extension of <strong>Fb</strong>.  <em>Do</em> include the rules for <strong>FbR</strong> which didn't change, if any (hint: they are not in the book, but we covered them in lecture).
      <li>Write out the proof tree for the above example using your rules.</li>
      </ol>
<li>
  For this question you are to implement an interpreter for <strong>FbR@</strong> based on your spec from the previous question.  In order to make things easier we will do this in one of the language extensions already in the FbDK that you have: <strong>FbRX</strong>.  Here is the expression type in <tt>src/FbRX/fbrxast.ml</tt>:

  <pre>
type label = Lab of string
 ...
type expr = (* ... Fb stuff, elided, see file *) |
  (* records *)
  | Record of (label * expr) list   | Select of label * expr  | Append of expr * expr
  (* other features of FbRX you should SKIP -- raise an exception if you see any of this. *)
  | Raise of exnid * expr
  | Try of expr * exnid * ident * expr
  | String of string
  </pre>

Here are some points.<ul>
    <li>The only file you should modify and submit is <tt>src/FbRX/fbrxinterp.ml</tt>; do not change the code above
          <tt>eval</tt> in that file.</li>

        <li>Notice the new AST binary operator <tt>Append</tt> is the <tt>@</tt> operator of the previous question; the rest of the record AST above is described in the book (the book also gives some idea on how to implement the records case of the interpreter, minus append).
        </li>
<li>As with Fb, <tt>make fbrx.byte</tt> will build your interpreter, <tt>ocamlrun fbrx.byte</tt> will run it, and the <tt>debugscript/fbrx.ml</tt> file should also
          work for interacting with the interpreter in the OCaml top loop. In other words, its more or less identical to
          how Fb developement worked, and we also supply you with "solution" binaries to check against in the binaries directory.  Note that our <strong>FbRX</strong> evaluator solution also slightly changes the way a few other operators of <strong>Fb</strong> work (which you probably will not notice); ignore that. </li>
        <li>You will need to port over your <strong>Fb</strong> interpreter code for the basic <strong>Fb</strong>
          features. If you lost points for buggy code there, we will be <em>very</em> helpful in getting your basic
          <strong>Fb</strong> interpreter stuff working now if you ask (i.e. ask any CA and you will be tutored in what was wrong with your code and how to
          fix it). In any case the tests will primarily be on the new record features and not on the function calling.  You can also skip Let Rec, we will not test that.
	</li>
  </ul>
  
<li> For this question we are going to do some object-oriented programming inside <strong>FbRX</strong>.  To review here is more or less how we encoded the Point class in lecture:
  <pre>
    Let pointC = Fun ix -> Fun iy ->
    { x = ix;
      y = iy;
      mag = Fun this -> Fun _ -> sqrt (sqr(this.x) + sqr(this.y));
      iszero = Fun this -> Fun _ -> this.mag this { }
    } In Let p = pointC 0 10 In p.iszero p { }
  </pre>
  This encoding is slightly different than the one in class in that it uses immutable fields, there is no "Ref" around the ix or iy values like in lecture.  (We also have a null argument on the methods, and sqr and sqrt are squaring and square root functions not shown here; if you want to run the code you can assume they are identity functions).
  <p> In this question we want to show how inheritance is easier to write in this encoded style now that we have record append.
    <ol class="a">
      <li>Consider the color point extension we made in lecture, something like 
  <pre>
  Let pointC = ... see above ... In
  Let cPointC = Fun ix -> Fun iy -> Fun ic ->
  Let super = pointC ix iy In
    { x = super.x; y = super.y;
      c = ic;
      iszero = super.iszero;
      mag = Fun this -> Fun _ -> mult(super.mag this { })(this.bright this { });
      bright = Fun this -> Fun _ -> this.r + this.g + this.b
    } In
Let cp = cPointC 0 10 {r = 0; g = 0; b = 0} In
  cp.iszero cp { }
   </pre>
  Re-write this example using record append so we don't have to manually copy-over all the fields and methods from the superclass.  You should run your example in <strong>FbRX</strong> before submitting to be sure it works.</li>
      <li> Multiple inheritance is when there are multiple superclasses with one subclass.  Since we are just hacking up classes here we can also hack up multiple inheritance: redo the answer from your previous question to make a class <tt>colorC</tt> which just has the color and brightness, and then create the <tt>cPointC</tt> as an extension of both <tt>colorC</tt> and <tt>pointC</tt>.  Make sure to also use record append here to put objects together as in the previous question, don't copy and paste. Hint: you will need two supers. </li>
    </ol>
</ol>


          <h3>Submission</h3>

          Upload (only) your file <tt>fbrxinterp.ml</tt>from question 2 to the <em>Assignment 6 code</em> target on Gradescope; upload the rest of your answers to <em>Assignment 6 written</em>.
          </ul>

    </section>
  </div>
</div>


<!--#include virtual="/pl/footer.html" -->

