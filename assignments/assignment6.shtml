<!--#include virtual="/pl/header.html" -->	 
</div>

<!-- Main -->
<div id="main" class="wrapper style4">

<!-- Content -->
<div id="content" class="container">
<section>
<header class="major">
  <h2>Assigment 6: Actors and ~=</h2>
</header>

<ol>

  !<li> [worth half of this assignment]
     In order to get the feel of actor programming you are going to write a simple messaging scenario in AFbV, the actors extension to Fb that we covered in lecture and which is in the FbDK.  
     <ul>
       <li>Your main program is to create three actors, <tt>boom1</tt>, <tt>boom2</tt>, and <tt>kaboom</tt>.</li>
       <li>Each <tt>boom</tt> actor is initialized with a counter of some integer e.g. <tt>Let mybooom = Create(boom,10)</tt>, and each time they receive a <tt>`tick(a)</tt> message, they decrement their internal counter and send <tt>a &lt;- `countis(n)</tt> for <tt>n</tt> the current count.  The <tt>a</tt> here is called the <em>customer</em> in actor terminology, you have to explicitly pass the actor that will get the result -- there is no "return" statement.
       <li>The <tt>kaboom</tt> actor knows the two boom actors' addresses (it gets passed a pair of them at creation time - <tt>Let kaboom = Create(kaboom, (boom1,boom2)) </tt>); when a <tt>kaboom</tt> actor gets a message <tt>`kaboom(v)</tt> for any value <tt>v</tt> it will send <tt>`tick</tt> messages to each of the two boom actors, get both replies, and verify they are synchronized at the same number.  If so, it will print out a string log message via exact command <tt>Print "Synched!\n"</tt> (please use exactly this command so we can verify you are printing the correct string in auto-grader) or <tt>Print "NOT synched!\n"</tt> if not. It will repeat this until it gets zero count back from both, at which point it will <tt>Print "PFFFFFFFT!\n"</tt> and stop sending ticks.  Note that if the actors get out of sync, <tt>kaboom</tt> should stop sending tick messages as the system is broken.</li>
       <li>One hard part about the <tt>kaboom</tt> design is it needs to receive two replies, the behavior needs to change to deal with that.  Think of <tt>kaboom</tt> as a 3-state machine: waiting for the initial <tt>`kaboom</tt> message, waiting for first <tt>`tick</tt> <tt>`countis</tt> reply, and waiting for second <tt>`tick</tt> <tt>`countis</tt> reply.
     </ul>
     Hints:
     <ul>
       <li>The file <a href="../ocaml/code/AFbV-examples.afbv">AFbV-examples.afbv</a> contains several examples worked in class. These are designed to be fed into the AFbV interpreter directly.</li>
       <li>We recently improved the interpreter to elminate some bugs and clean up the trace output and strongly suggest you <a href="http://pl.cs.jhu.edu/pl/book/_dist/">download the FbDK again</a> and use the AFbV binaries in this new version.</li>
       <li>Command <tt>ocamlrun binaries/afbv.byte --show-messages --show-states</tt> with the new binary will trace the evolution of the actor system states as well as announce messages as they are delivered to actors.
       <li>Use the template file <a href="assignment6.ml">assignment6.ml</a> for your answers.  As with the previous auto-graded assignments, all you should do is fill in the boom and kaboom definitions as strings; your submitted file should not run anything.</li>
       <li>Note that the <tt>debugscript/afbv.ml</tt> file is by default loading the binaries from the dist source and the eval function in the dist is just the identity function.  So, you probably want to edit that file and replace the two <tt>#directory</tt> commands in that file with <tt>#directory "binaries/libraries";;</tt> to load the binaries from the dist.
	 <li>Another somewhat annoying issue is that in your answer file you will need to escape the quotes in your print statements for OCaml to accept them.  So, you will need to have <tt>Print \"PFFFFFFFT!\n\"</tt> for example.  The <tt>afbv.byte</tt> interpreter on the other hand requires that you not escape the quotes, so if you are using that to test your code remember to escape the quotes with <tt>\</tt> before uploading your submission to Gradescope.
	 </ul>

  <li>[20 points] For this question we will explore the operational semantics of the above Actor system.  Suppose <tt>expr</tt> was exactly as in <tt>assignment6.ml</tt>.  Then the run of <tt>rep expr</tt> would first step to something like
  <pre>
    G = { &lt;a_boom1, ...>, &lt;a_boom2, ...>, &lt;a_kaboom, ...> } U { [a_kaboom &lt- `kaboom 0]}
  </pre>
  by the global rule in section 7.2.5 of the book.
  <ol class="a">
    
    <li>Show why this would happen: decribe what the <tt>v</tt>, <tt>v'</tt>, and <tt>S</tt> would be in the <tt>v v' =S=> v''</tt> portion of the global rule 7.2.5 for that step.  You don't need to show the whole <tt>=S=></tt> derivation, just describe in English why <tt>S</tt> is what it is.
    <li>Show all of the global steps this system would take, in the above book notation of a set G.  Note this is a pretty easy question if you got your code from 1a. working, you just need to put the state trace into the G set form above.  Don't show the code, <tt>...</tt> is fine as above.
      </ol>
 

<li> [30 points] This question concerns the operational semantics topic from lecture.  For each of the following <b>Fb</b> expressions, indicate whether operational equivalence
  holds. If it <b>holds</b>, try to use the laws in the book Section 2.4.2 to show it.  Note that the laws may not allow all of the true equations below to be shown, the laws in the book are very (!) incomplete.  Just say "true but laws cannot show" for those examples.  If it <b>fails</b>, show some context that evaluates differently dependent upon 
   which of the two expressions you use. 
   
<ol class="a">
  <li><tt>(Fun y -> Not y) False =~ True </tt></li>
  <li><tt>y + x =~ x + y</tt></li>
  <li><tt>(Fun x -> Fun f -> f x + f x) x =~ Fun f -> f x + f x</tt></li>
  <li><tt>(Fun x -> x x) =~ x x </tt></li>
    </ol>

</ol>

<h3>Submission and Grading</h3>

<ul>
  <li>We will be using <a href="https://gradescope.com">Gradescope</a> again.</li>
  <li>There will be two separate submissions in Gradescope for this assignment: "Assignment 6 code" for question 1 (which will be auto-graded;  upload ONLY the file <tt>assignment6.ml</tt> which should only be defining two strings), and  "Assignment 6 written" for the written questions 2 and 3. <em>In your written question submission please include your name and list of collaborators if any.</em></li>
    </ul>
	
</section>
</div>
</div>


<!--#include virtual="/pl/footer.html" -->

