<!--#include virtual="/pl/header.html" -->

</div>

<div id="content">


<h2>Homework - 6
</h2>
<h4>Due: Friday May 4th</h4>

<ol>
  <li>
	<p>
    <strong>Type Checker (65 Points)</strong>: Write a type checker for <strong>TFbSRX</strong>. 
	
	The language is described in section 6.4 of the book. FbDk has been extended to provide you with the standard paraphernalia for the language. Pick it up <a href="fbdk-1.23 -for-TFbSRX.zip">here</a>. A binary for <strong>TFbSRX</strong> can be downloaded <a href="TFbSRX_Binaries.zip">here</a>. See also <a href="#InstallationAndHints">installation and hints</a>.
	</p>
	<p>
	<strong>Extra Credit (10 Points)</strong>: Write an interpreter for <strong>TFbSRX</strong>.
	</p>
  </li>
  <li>
  <p>
	<strong>Actor System Evolution (10 Points)</strong>: 
	<p>
	Suppose there is an actor system global state:
	   <code> G1 = { &lt; a0, Function dum_msg -> Let x = create(CountTenBeh2, 2) In x <- `count(_) &gt; ,
            [ a0 &lt;- 5 ] } </code>.</p>
	<p>
    Show all of the possible transition sequences <code>G1 --> G2 --> ... </code> that the system starting in this configuration could evolve to.  Note the definition of CountTenBeh2 is given in the book, it is the second count down example.  We are only counting down starting from 2 to save wear and tear on your fingers.  Note that for each step <code>Gi --> G(i+1)</code> give the <code>v v' ==S==> v'</code> that leads to that step as per the Global Rule in section 7.2.5 of the book.  You don't need to show how this <code>v v'</code> computation computes, just give each one of them, i.e. be clear what <code>v/v'/v''</code> are for each global transition.
	</p>
  </li>
  <li>
	<strong>Working with AFbV (25 Points)</strong>: Write an <strong>AFbV</strong> program to simulate the <a href="http://en.wikipedia.org/wiki/Dining_philosophers_problem">dining philosophers problem</a>.
	<br><br>
	<ol>
	<li>
	Write <strong>AFbV</strong> code which creates five philosopher actors, five shared fork actors as per <br>

    <img
    src="http://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Dining_philosophers.png/200px-Dining_philosophers.png">
    <br> and asks all of the philosophers to start eating.  When each philosopher actor gets its <code>`eat()</code> message it <code>`grab()</code>'s its two neighboring fork objects, eats
   (actually this is a no-op), and then <code>`putDown()</code>'s its forks. The hard part of this question is the e.g. <code>leftFork -> `grab()</code> message; it is asynchronous (all actor messages are asynchronous). So the philosopher needs to go into a mode waiting for an explicit reply <code>`gotMe()</code> from each fork.  Note that forks never reply they are busy; they either reply <code>`gotMe()</code> or they don't reply at all.  If the fork is busy it should still remember it got a request and deal with it when it is put down.
   </li>
   <li>
   The dining philosophers problem is an example of a potentially deadlocking system because a philosopher may find its left fork already grabbed by its left neighbor when it tries to grab it and so
   all philosophers could be in a state of holding their left fork and waiting for their neighbor to put down the right fork .. forever.  Show a run of the operational semantics where the philosophers deadlock.  <br>
   </li>
   </ol>
  
  <br>
   Some general points about this question:
    <ul>
      <li>
       Feel free to reduce the above problem to two philosophers with two forks to save wear and tear on your fingers. But your solution/answer should work in the general case.
      <li> 
	  You can assume <strong>AFbV</strong> has tuples built in as well, to make your coding easier (they can be encoded but its ugly).
	  </li>
	  <li>You are free to be as inefficient as you want in your implementation.</li>
      <li>You may want to add some arguments to the messages sketched above; arguments are not shown.  Do implement some form of <code>`eat/`grab/`gotMe/`putdown</code>. 
      </li>
</ol>

<a name="InstallationAndHints"><h3>Installation and Hints</h3></a>
<ul>
<li>Installation is similar to Homework-3. Follow the instructions from <a href="../caml/ocaide.shtml">here</a>
</li>
<li>The code for <strong>TFbSRX</strong> is in the FbExt directory of the SDK. "make" will automatically build the FbExt binary.
</li>
<li>
 Your typechecker should go in to the file <code>fbexttype.ml</code> and if you are attempting the bonus question, your interpreter should go in to <code>fbextinterp.ml</code>. The file <code>fbdktoploop.ml</code> in the FbExt directory contains quite a few examples for you to test the typechecker with.
 </li>
 <li>
 The ast for the language is slightly different from the one on page 116 of the textbook. It is slightly simplified.
 </li>
 <li>
 Notice that <code>Raise exception</code> evaluates to "arbitrary tau". As Prof Scott mentioned in class, this is usually handled by introducing a "bottom type" - a type that is equal to every other type in the system. A new type <code>TBottom</code> has been added to the type set for this purpose.
 </li>
 <li>
 Type checking exceptions can be somewhat tricky; especially their interactions with <i>other</i> expressions and type rules. You need to consider each rule carefully.<br>
 <br>
 For example:<br>
 <code>
  |- (Function x:Int -> x = 1) (Raise #Exn@Bool False) : Bool <br>
  &nbsp;&nbsp;Because by function rule</br>
  &nbsp;&nbsp;|- (Function x:Int -> x = 1) : Int -> Bool <br>
  &nbsp;&nbsp;and by exception rule <br>
  &nbsp;&nbsp;|- (Raise #Exn@Bool False) : Bottom (arbitrary tau) <br>
  And because Int and Bottom can be equated, by application rule we have <br>
  |- (Function x:Int -> x = 1) (Raise #Exn@Bool False) : Bool <br>
 </code>
 </li>
</ul>
<p><strong>Note:</strong>It is possible that that the provided binary has bugs. Let us know if you find something confusing or spot any anomalous behavior.


<h3>Submission</h3>
<p>
  For the typechecker/interpreter part of the assignment, submit only the <code>fbexttype.ml</code> and <code>fbextinterp.ml</code> files that will "plug in" to the FbDK and build the interpreter. Use Blackboard for submission as usual. Do not forget to submit the written part of the homework.
</p>

</div>

<!--#include virtual="/pl/footer.html" -->
