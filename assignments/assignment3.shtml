<!--#include virtual="/pl/header.html" -->	 
</div>

<!-- Main -->
<div id="main" class="wrapper style4">

<!-- Content -->
<div id="content" class="container">
<section>
<header class="major">
  <h2>Assigment 3: Interpreter and friends</h2>
</header>

  <h4>Due: Wed March 8th</h4>
<p>
  This assignment has three parts.
  <ol>
    <li>
      Write an interpreter for F&#x266d; as defined in the book. You need to
      implement all features <strong>except</strong> for <code>Let Rec</code>.</li>
    <li>Write some F&#x266d; programs by filling in the template in <a href="assignment3.ml">assignment3.ml</a>.</li>
    <li>Answer the written questions below.
  </ol>

  <h3>The F&#x266d; Development Kit (FbDK)</h3>

We have provided you with the FbDK to make your job easier.
<ul>
  <li>
    The FbDK distribution is
    <a href="http://pl.cs.jhu.edu/pl/book/dist/">here</a> in both source and
    binary form. The FbDK is described in detail in Appendix A of
    <a href="http://pl.cs.jhu.edu/pl/book/dist/book/book.pdf">the book</a>.
  </li>
  <li>
    The FbDK source distribution includes code and scripts to build a standalone
    F&#x266d; interpreter, a F&#x266d; top loop in analogy to
    the <code>ocaml</code> top loop. It includes a parser and pretty printer.
    All you need to do is write an <code>eval</code> function in the
    file <a href="http://pl.cs.jhu.edu/pl/book/dist/FbDK/downloads/source/fbdk-1.23/src/Fb/fbinterp.ml"><code>.../src/Fb/fbinterp.ml</code></a>.
  </li>
  <li>
    The distribution
    file <a href="http://pl.cs.jhu.edu/pl/book/dist/FbDK/downloads/source/fbdk-1.23/src/Fb/fbast.ml"><code>.../src/Fb/fbast.ml</code></a>
    is a variant that defines the grammar to be used for F&#x266d;.
  </li>
  <li>
    The FbDK also contains a complete BOOL interpreter for the little boolean
    language in the
    subdir <a href="http://pl.cs.jhu.edu/pl/book/dist/FbDK/downloads/source/fbdk-1.23/src/BOOL/"><code>.../src/BOOL/</code></a>.
    The complete source for the BOOL evaluator is also given.
  </li>
  <li>
    The <a href="http://pl.cs.jhu.edu/pl/book/dist/FbDK/downloads/binaries/">FbDK
    binary distribution</a> includes bytecodes for a correct F&#x266d;
    interpreter <code>fb.byte</code> - executed as <code>ocamlrun fb.byte</code>
    - that you can test your interpreter against.
  </li>
  <li>
    You may find it handy to debug your interpreter with help of the
    interactive <code>ocaml</code> top loop. Once you have <code>make</code>'d
    all the files, run <code>ocaml</code> from the <code>src/Fb/</code>
    directory and <code>#use "fbdktoploop.ml";;</code> which loads
    the <a href="http://pl.cs.jhu.edu/pl/book/dist/FbDK/downloads/source/fbdk-1.23/src/Fb/fbdktoploop.ml"><code>.../src/Fb/fbdktoploop.ml</code></a>
    file -- this will load the F&#x266d; interpreter structures. Look at the
    source of this file for the functions it contains. (NOTE: You may need to
    add a <code>#cd [your Fb directory here] ;;</code> at the top of the file to
    make it load correctly. Check the comments in the file for details). Note
    you can also use <code>fbdktoploop.ml</code> with the binaries by using
    the <code>.cmo</code> files in the subdirectory <code>cmo/</code> of the
    binary distribution.
  </li>
  <li>
    The F&#x266d;DK distribution also contains the source of all F&#x266d; code
    examples in the
    book, <a href="http://pl.cs.jhu.edu/pl/book/dist/FbDK/downloads/source/fbdk-1.23/src/Fb/fbexamples.ml"><code>.../src/Fb/fbexamples.ml</code></a>
  </li>
</ul>

<h3>Interpreter writing hints</h3>
<ol>
  <li>
    Use the F&#x266d; operational semantics rules as the guidepost: all you are
    doing is implementing those rules.
    <p style="margin-bottom: 0px;">
      You may have heard
      of <a href="https://en.wikipedia.org/wiki/Postels_law">Postel's Law</a>:
      "Be conservative in what you do, be liberal in what you accept from
      others."
    <p style="margin-bottom: 0px;">
      Do <em>not</em> do this; stay as close to the spec as possible in all
      cases (Optional reading: <a href="https://queue.acm.org/detail.cfm?id=1999945">
      The Robustness Principle Reconsidered</a>).
  </li>
  <li>
    For a warm-up, get the numbers and booleans to evaluate properly, then
    tackle functions.
  </li>
  <li>
    You will need to write several auxiliary functions for performing
    substitution, etc. </li>
  <li>
    Declare and raise appropriate exceptions.
  </li>
  <li>
    The file <a href="http://pl.cs.jhu.edu/pl/book/dist/FbDK/downloads/source/fbdk-1.23/src/Fb/fbexamples.ml">.../src/Fb/fbexamples.ml</a>
    in the distribution includes many F&#x266d; examples.
  </li>
  <li>
    You will probably want to write at least three functions:
    <ol type="i">
      <li><tt>eval</tt>, a stub for which is provided,</li>
      <li><tt>subst</tt>, a function implementing variable substitution</li>
      <li><tt>check_closed</tt>, a function which determines whether or not an expression is closed</li>
    </ol>
    Remember that you must raise an exception if you are provided an expression
    which is not closed, such as <tt>Function x -> y</tt>.
  </li>
  <li>
    If you start the F&#x266d; interpreter with the command line
    argument <tt>--show-backtrace</tt>, the toploop should print out a stack
    trace whenever it encounters an exception. This can be useful for
    debugging.
  </li>
</ol>

<h3>Part 3: A couple written questions</h3>
<p> Here are a couple questions to reinforce the recent lectures on operational semantics.
<ol>
  <li>[5 points] The operational semantics for Fb provide a set of proof rules
  which are used by the interpreter to perform evaluation.  In this
  problem, you will build a proof by hand.  Write an operational
  semantics proof which demonstrates that the Fb expression <code>(Fun f ->
  Fun y -> f y) (Fun z -> z + z) 2</code> evaluates to 4.
      <br>
      Your proof should follow the Fb operational semantics rules correctly and not skip any steps.</li>
<li> [5 points] In part 2 you implemented less-than, &lt;, on integers as an Fb program.  This was not very practical however because it is inefficient.  For this question imagine we added <code>e1 &lt e2</code> as new syntax to Fb.  Give the new operational semantics rule(s) implementing it. Your less-than needs to work on integers only, not booleans or functions.</li>
<li> [5 points] In languages like C or Java, binary boolean operators are
  'short circuiting' - i.e. For an expression like <code>file != null &&
  file.length() &lt; 0</code>, the second expression is evaluated only if the
  first expression is true. Similarly for '||' operations, the second
  expression is evaluated only if the first expression evaluates to
  false. This is not true in the default Fb operational semantics.
   Modify the operational semantics of Fb <code>And</code> and <code>Or</code> such that they
  perform short-circuiting.</li>
    </ol>


<h3>Submission and Grading</h3>

<ul>
  <li>We will be using <a href="https://gradescope.com">Gradescope</a> again.</li>
    <li>Since Gradescope does not support assignments which are partly graded automatically and partly graded manually, there are two separate submissions set up.
  <li>For parts 1 and 2, they are graded automatically.  Upload exactly <em>two</em> files, your <code>fbinterp.ml</code> file with your evaluator code and the filled-in <code>assignment3.ml</code> file (that name exactly and no other files). Upload these to the "Assignment 3 parts 1 and 2" assignment in Gradescope.</li>
  <li>For part 3, upload a pdf or similar file with your answers to the "Assignment 3 part 3" Gradescope assignment.</li>
    </ul>
	
</section>
</div>
</div>


<!--#include virtual="/pl/footer.html" -->
