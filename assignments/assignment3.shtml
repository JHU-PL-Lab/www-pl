<!--#include virtual="/pl/header.html" -->	 
</div>

<!-- Main -->
<div id="main" class="wrapper style4">

<!-- Content -->
<div id="content" class="container">
<section>
<header class="major">
  <h2>Assigment 3</h2>
</header>

<p>
  This is a short homework giving you some practice with operational semantics before starting on writing your Fb interpreter.  Please consult <a href="http://pl.cs.jhu.edu/pl/book/book.pdf">Chapter 2 of the book</a>
   for the full details on various definitions, and for more examples beyond those in lecture, if you have any questions.
  <ol>
    <li>[5 points] Compute the following substitutions.  Note that the substitution function is defined formally in Section 2.3.2 of the book.
      <ol class="a">
	<li><code>(Fun x -> x + 1) [3/x]</code>
<li><code>(Fun x -> Fun y -> x And y) [True/x]</code>
<li><code>(Fun x -> Fun y -> x And y) [True/y]</code>
<li><code>(Fun x -> Fun y -> x And y) [True/z]</code>
<li><code>((Fun x -> x) (Fun y -> x)) [2/x]</code>
<li><code>(Fun x -> Let y = x + 1 In y + 2) [5/y]</code>
<li><code>(Fun x -> Let y = x + 1 In z + 2) [5/z]</code>
      </ol>
      <p>
  <li>[15 points] Write operational
    semantics proofs (i.e., trees) showing what the following expressions evaluate to in the Fb operational semantics.  Please give the whole proof trees, using the rules in Chapter 2.
        <ol class="a">
      <li><pre>(Fun f -> (Fun z -> (f z) + 1)) (Fun y -> y + 1)</pre>
  <li><pre>((Fun f -> (Fun z -> (f z) + 1)) (Fun y -> y + 1)) 4</pre> (you can reference the previous proof in this one)
  <li><pre>(Fun x -> (Fun a -> a + 1) (If x = 2 Then 0 Else 1)) 2</pres>
  </li>
    </ol>
      <p>
	<li>[5 points] Recall that if it is impossible to to build a complete proof tree showing some <code>e => v</code> then the relation doesn't hold.  So, show that
	  <pre>(Fun q -> q = False) 0 => False</pre> fails to hold.</li>

      <p>
	
	<li> [10 points] In <a href="assignment2.ml">Assignment 2 Problem 4</a>
	  you created an evaluator for a simple arithmetic language, Arith.  But, we never formally defined its (concrete) grammar or the operational semantics rules.
	  <ol class="a">
	    <li>Define the grammar of expressions and values for Arith using BNF notation.
	      <li>Give the full set of operational semantics rules for Arith.
		<li>The Arith language is normalizing: For all Arith expressions <tt>e</tt>, there is some Arith value <tt>v</tt> where <tt>e => v</tt>.  Prove this.  (Hint: the book outlines how to prove it for the BOOL language).  
	      </ol>
  </ol>


<h3>Submission and Grading</h3>

Upload your homework as a pdf to Gradescope.  Feel free to write by hand and scan it in, just verify your scan is fully legible before submitting!
	
</section>
</div>
</div>


<!--#include virtual="/pl/footer.html" -->
